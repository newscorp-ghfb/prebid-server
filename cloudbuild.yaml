steps:
# Call docker build to build the image, using the previous build for caching
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'pull', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:latest' ]
- name: 'gcr.io/cloud-builders/docker'
  args: ['build',
    '--cache-from', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:latest',
    '-t', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:$COMMIT_SHA', '.']
  dir: 'newsiq-metrics-exporter'
# Tag the image
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:latest']
# Push the image
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:$COMMIT_SHA']
# Remote tag the newly pushed image as latest
- name: 'gcr.io/cloud-builders/gcloud'
  args: ['container', 'images', 'add-tag', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:latest']
# Update the prebid-server deployment to use the image we just built
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
    - --namespace=airflow
    - set
    - image
    - deployment
    - airflow-worker
    - airflow=gcr.io/$PROJECT_ID/prebid-cloudops/prebid-server:$COMMIT_SHA
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=$_CLOUDSDK_COMPUTE_ZONE'
  - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLOUDSDK_CONTAINER_CLUSTER'